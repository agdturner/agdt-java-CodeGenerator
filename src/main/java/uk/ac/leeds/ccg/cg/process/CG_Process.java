/*
 * Copyright 2019 Centre for Computational Geography, University of Leeds.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package uk.ac.leeds.ccg.cg.process;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.TreeSet;
import uk.ac.leeds.ccg.data.Data_VariableType.Data_VariableNamesAndTypes;

/**
 * CG_Process
 *
 * @author Andy Turner
 * @version 1.0.0
 */
public class CG_Process {

    /**
     * For helping to ensure generated code is indented correctly.
     */
    public final HashMap<Integer, String> indents;

    /**
     * For representing the indent amount. The number of spaces for each indent.
     */
    public final String indent;

    /**
     * Creates a new instance. {@link #indent} is set to " " by default.
     */
    public CG_Process() {
        indents = new HashMap<>();
        indent = "    ";
    }

    /**
     * For getting a String with {@code i} concatenations of {@link #indents}.
     * This first tries to look up the value in {@link #indents}, if there is no
     * mapping for the key {@code i}, then it is created.
     *
     * @param i The number of indents.
     * @return A String with {@code i} concatenations of {@link #indents}.
     */
    public String getIndent(int i) {
        if (!indents.containsKey(i)) {
            String s = "";
            for (int j = 0; j < i; j++) {
                s += indent;
            }
            indents.put(i, s);
            return s;
        }
        return indents.get(i);
    }

    /**
     *
     * @param pw The PrintWriter.
     * @param packageName The name for the package.
     * @param imports The list of imports.
     */
    public void writeHeaderPackageAndImports(PrintWriter pw,
            String packageName, ArrayList<String> imports) {
        pw.println("/*");
        pw.println(" * Source code generated by " + this.getClass().getName());
        pw.println(" */");
        pw.println("package " + packageName + ";");
        pw.println();
        if (imports != null) {
            Iterator<String> ite = imports.iterator();
            while (ite.hasNext()) {
                pw.println("import " + ite.next() + ";");
            }
        }
        //pw.flush();
    }

    /**
     *
     * @param pw PrintWriter
     * @param packageName Package name
     * @param imports Can be {@code null} If there are no imports.
     * @param vnt Variable names and types. This is used to know if BigDecimal
     * and/or BigInteger need to be imported.
     */
    public void writeHeaderPackageAndImports(PrintWriter pw,
            String packageName, ArrayList<String> imports,
            Data_VariableNamesAndTypes vnt) {
        writeHeaderPackageAndImports(pw, packageName, imports);
        boolean hasBigDecimals = false;
        for (int i = 0; i < vnt.bigDecimals.length; i++) {
            if (vnt.bigDecimals[i]) {
                hasBigDecimals = true;
                break;
            }
        }
        if (hasBigDecimals) {
            pw.println("import java.math.BigDecimal;");
        }
        boolean hasBigIntegers = false;
        for (int i = 0; i < vnt.bigIntegers.length; i++) {
            if (vnt.bigIntegers[i]) {
                hasBigIntegers = true;
                break;
            }
        }
        if (hasBigIntegers) {
            pw.println("import java.math.BigInteger;");
        }
    }

    /**
     *
     * @param pw The PrintWriter.
     * @param packageName The name for the package.
     * @param className The class name.
     * @param implementations The things implemented by the class.
     * @param extendedClassName The name of the class to be extended.
     */
    public void printClassDeclaration(PrintWriter pw,
            String packageName, String className, String implementations,
            String extendedClassName) {
        pw.println();
        pw.print("public class " + className);
        if (!extendedClassName.isEmpty()) {
            pw.print(" extends " + extendedClassName);
        }
        if (!implementations.isEmpty()) {
            pw.print(" implements " + implementations);
        }
        pw.println(" {");
    }

    /**
     *
     * @param pw The PrintWriter.
     * @param serialVersionUID The serialVersionUID.
     */
    public void printSerialVersionUID(PrintWriter pw, long serialVersionUID) {
        pw.println();
        pw.println(getIndent(1) + "private static final long serialVersionUID"
                + " = " + serialVersionUID + "L;");
    }

    /**
     *
     * @param pw The PrintWriter.
     * @param packageName The name for the package.
     * @param className The class name.
     * @param isAbstract If true then the class is declared abstract.
     * @param implementations The things implemented by the class.
     * @param extendedClassName The name of the class to be extended.
     */
    public void printClassDeclaration(PrintWriter pw,
            String packageName, String className, boolean isAbstract,
            String implementations, String extendedClassName) {
        pw.println();
        pw.print("public ");
        if (isAbstract) {
            pw.print("abstract ");
        }
        pw.print("class " + className);
        if (!extendedClassName.isEmpty()) {
            pw.print(" extends " + extendedClassName);
        }
        if (!implementations.isEmpty()) {
            pw.print(" implements " + implementations);
        }
        pw.println(" {");
        //pw.flush();
    }

    /**
     *
     * @param pw PrintWriter
     * @param type2TypeName type2TypeName
     * @param vnt Data_VariableNamesAndTypes
     */
    public void printFieldDeclarations(PrintWriter pw,
            HashMap<Integer, String> type2TypeName,
            Data_VariableNamesAndTypes vnt) {
        Iterator<Integer> ite = vnt.order2FieldNames.keySet().iterator();
        pw.println();
        while (ite.hasNext()) {
            int index = ite.next();
            String field = vnt.order2FieldNames.get(index);
            int t = vnt.order2Type.get(index);
            String typeName = type2TypeName.get(t);
            // print field declaration
            pw.println(getIndent(1) + "protected " + typeName + " " + field + ";");
        }
    }

    /**
     * @param pw PrintWriter
     * @param className Class name.
     * @param name Name
     * @param vnt Data_VariableNamesAndTypes
     */
    public void printConstructor(PrintWriter pw, String className, String name,
            Data_VariableNamesAndTypes vnt) {
        pw.println();
        pw.println(getIndent(1) + "public " + className + "(" + name
                + "_RecordID i, " + "String line) throws Exception {");
        pw.println(getIndent(2) + "super(i);");
        pw.println(getIndent(2) + "String[] s = line.split(\",\");");
        for (int j = 0; j < vnt.order2FieldNames.size(); j++) {
            pw.println(getIndent(2) + "init" + vnt.order2FieldNames.get(j)
                    + "(s[" + j + "]);");
        }
        pw.println(getIndent(1) + "}");
        printGetID(pw, name);
    }

    public void printGetID(PrintWriter pw, String name) {
        pw.println();
        pw.println(getIndent(1) + "@Override");
        pw.println(getIndent(1) + "public " + name + "_RecordID getID() {");
        pw.println(getIndent(2) + "return (" + name + "_RecordID) id;");
        pw.println(getIndent(1) + "}");
    }

    /**
     * printFieldGetters
     *
     * @param pw PrintWriter
     * @param type2TypeName type2TypeName
     * @param vnt Data_VariableNamesAndTypes
     */
    public void printFieldGetters(PrintWriter pw,
            HashMap<Integer, String> type2TypeName,
            Data_VariableNamesAndTypes vnt) {
        Iterator<Integer> ite = vnt.order2FieldNames.keySet().iterator();
        while (ite.hasNext()) {
            int index = ite.next();
            String field = vnt.order2FieldNames.get(index);
            int t = vnt.order2Type.get(index);
            pw.println();
            pw.println(getIndent(1) + "public " + type2TypeName.get(t) + " get"
                    + field + "() {");
            pw.println(getIndent(2) + "return " + field + ";");
            pw.println(getIndent(1) + "}");
        }
        //pw.flush();
    }

    /**
     * printFieldInits
     *
     * @param pw PrintWriter
     * @param vnt Data_VariableNamesAndTypes
     */
    public void printFieldInits(PrintWriter pw, Data_VariableNamesAndTypes vnt) {
        Iterator<Integer> ite = vnt.order2FieldNames.keySet().iterator();
        while (ite.hasNext()) {
            Integer i = ite.next();
            String field = vnt.order2FieldNames.get(i);
            int fieldType = vnt.order2Type.get(i);
            pw.println();
            pw.print(getIndent(1));
            pw.println("protected final void init" + field + "(String s) {");
            pw.println(getIndent(2) + "if (!s.trim().isEmpty()) {");
            pw.print(getIndent(3) + field + " = ");
            switch (fieldType) {
                case 0:
                    pw.println("s;");
                    break;
                case 1:
                    pw.println("new BigDecimal(s);");
                    break;
                case 2:
                    pw.println("Double.parseDouble(s);");
                    break;
                case 3:
                    pw.println("Float.parseFloat(s);");
                    break;
                case 4:
                    pw.println("new BigInteger(s);");
                    break;
                case 5:
                    pw.println("Long.parseLong(s);");
                    break;
                case 6:
                    pw.println("Integer.parseInt(s);");
                    break;
                case 7:
                    pw.println("Short.parseShort(s);");
                    break;
                default:
                    pw.println("Byte.parseByte(s);");
                    break;
            }
            pw.println(getIndent(2) + "} else {");
            pw.println(getIndent(3) + field + " = null;");
            pw.println(getIndent(2) + "}");
            pw.println(getIndent(1) + "}");
        }
    }

    /**
     * Returns all the values common to the sets in s.
     *
     * @param s Array of sets. 
     * @return Set of fields in common.
     */
    public TreeSet<String> getFieldsInCommon(TreeSet<String>... s) {
        TreeSet<String> r = new TreeSet<>();
        if (s.length > 0) {
            r.addAll(s[0]);
            for (int i = 1; i < s.length; i++) {
                r.retainAll(s[i]);
            }
        }
        return r;
    }

    protected HashMap<String, Byte> setCommonBooleanMaps(
            HashMap<String, Byte>[] v0ms, HashMap<String, Byte>[] v1ms,
            TreeSet<String>[] allFields, HashMap<String, Integer> fieldTypes) {
        TreeSet<String> fields = allFields[5];
        HashMap<String, Byte> v0m1 = new HashMap<>();
        HashMap<String, Byte> v1m1 = new HashMap<>();
        Iterator<String> ites0 = fields.iterator();
        while (ites0.hasNext()) {
            String field0 = ites0.next();
            if (fieldTypes.get(field0) == 5) {
                for (int w = 0; w < v0ms.length; w++) {
                    HashMap<String, Byte> v0m = v0ms[w];
                    HashMap<String, Byte> v1m = v1ms[w];
                    Iterator<String> ites1 = v0m.keySet().iterator();
                    while (ites1.hasNext()) {
                        String field1 = ites1.next();
                        if (field0.equalsIgnoreCase(field1)) {
                            byte v0 = v0m.get(field1);
                            Byte v1;
                            if (v1m == null) {
                                v1 = Byte.MIN_VALUE;
                            } else {
                                //System.out.println("field1 " + field1);
                                //System.out.println("field1 " + field1);
                                v1 = v1m.get(field1);
                                if (v1 == null) {
                                    v1 = Byte.MIN_VALUE;
                                }
                            }
                            Byte v01 = v0m1.get(field1);
                            Byte v11 = v1m1.get(field1);
                            if (v01 == null) {
                                v0m1.put(field1, v0);
                            } else {
                                if (v01 != v0) {
                                    // Field better stored as a byte than boolean.
                                    fieldTypes.put(field1, 4);
                                }
                                if (v11 == null) {
                                    v1m1.put(field1, v1);
                                } else {
                                    if (v1 != v11.byteValue()) {
                                        // Field better stored as a byte than boolean.
                                        fieldTypes.put(field1, 4);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return v0m1;
    }

    /**
     * Finds and returns those fields that are in common and those fields .
     * result[0] are the fields in common with all.
     *
     * @param headers
     * @return List of fields.
     */
    public ArrayList<String>[] getFieldsList(ArrayList<String> headers) {
        int size = headers.size();
        ArrayList<String>[] r;
        r = new ArrayList[size];
        Iterator<String> ite = headers.iterator();
        int i = 0;
        while (ite.hasNext()) {
            r[i] = getFieldsList(ite.next());
            i++;
        }
        return r;
    }

    /**
     * @param fields as a String[]
     * @return fields as a TreeSet
     */
    public TreeSet<String> getFields(String[] fields) {
        TreeSet<String> r = new TreeSet<>();
        r.addAll(Arrays.asList(fields));
        return r;
    }

    /**
     *
     * @param s A String with fields separated by tabs.
     * @return List of fields.
     */
    public ArrayList<String> getFieldsList(String s) {
        ArrayList<String> r = new ArrayList<>();
        String[] split = s.split("\t");
        r.addAll(Arrays.asList(split));
        return r;
    }

}
